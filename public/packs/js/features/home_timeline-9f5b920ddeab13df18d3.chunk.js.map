{"version":3,"sources":["webpack:///./node_modules/@material-symbols/svg-600/outlined/campaign.svg","webpack:///./app/javascript/mastodon/features/getting_started/components/announcements.jsx","webpack:///./app/javascript/mastodon/features/getting_started/containers/announcements_container.js","webpack:///./app/javascript/mastodon/features/home_timeline/components/column_settings.tsx","webpack:///./app/javascript/mastodon/features/home_timeline/components/critical_update_banner.tsx","webpack:///./app/javascript/mastodon/features/home_timeline/components/explore_prompt.tsx","webpack:///./app/javascript/mastodon/features/home_timeline/index.jsx"],"names":["_path","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","SvgCampaign","_ref","title","titleId","props","xmlns","width","height","viewBox","id","d","messages","defineMessages","close","defaultMessage","previous","next","ContentWithRouter","ImmutablePureComponent","constructor","setRef","c","node","onMentionClick","mention","e","history","button","ctrlKey","metaKey","preventDefault","push","get","onHashtagClick","hashtag","replace","onStatusClick","status","getIn","handleMouseEnter","currentTarget","autoPlayGif","emojis","querySelectorAll","emoji","src","getAttribute","handleMouseLeave","_ref2","componentDidMount","_updateLinks","componentDidUpdate","links","link","classList","contains","add","announcement","find","item","href","addEventListener","setAttribute","textContent","previousSibling","text","render","_jsx","className","ref","dangerouslySetInnerHTML","__html","onMouseEnter","onMouseLeave","propTypes","ImmutablePropTypes","map","isRequired","WithRouterPropTypes","Content","withRouter","Emoji","PureComponent","emojiMap","hovered","unicodeMapping","filename","shortCode","_jsx2","draggable","alt","assetHost","Reaction","state","handleClick","reaction","announcementId","addReaction","removeReaction","setState","classNames","active","onClick","style","AnimatedNumber","value","PropTypes","string","func","object","ReactionsBar","handleEmojiPick","data","native","willEnter","scale","reduceMotion","willLeave","spring","stiffness","damping","reactions","visibleReactions","filter","x","styles","toArray","TransitionMotion","items","isEmpty","_ref3","transform","position","size","EmojiPickerDropdown","onPickEmoji","Icon","icon","AddIcon","list","Announcement","unread","selected","startsAt","Date","endsAt","now","hasTimeRange","skipYear","getFullYear","skipEndDate","getDate","getMonth","skipTime","FormattedMessage","FormattedDate","hour12","year","undefined","month","day","hour","minute","intl","bool","Announcements","index","handleChangeIndex","announcements","handleNextClick","handlePrevClick","getDerivedStateFromProps","_markAnnouncementAsRead","dismissAnnouncement","mascot","elephantUIPlane","ReactSwipeableViews","animateHeight","animateTransitions","onChangeIndex","idx","disabled","disableSwiping","reverse","IconButton","formatMessage","iconComponent","ChevronLeftIcon","ChevronRightIcon","injectIntl","customEmojiMap","createSelector","reduce","set","ImmutableMap","connect","dispatch","name","ColumnSettings","settings","useAppSelector","useAppDispatch","onChange","useCallback","checked","changeSetting","SettingToggle","prefix","settingPath","label","CriticalUpdateBanner","ExplorePrompt","DismissableBanner","background","Link","to","show_announcements","hide_announcements","getHomeFeedSpeed","ImmutableList","statusIds","pendingStatusIds","statusMap","statuses","concat","me","take","gap","newest","datetimes","oldest","min","max","homeTooSlow","isLoading","isPartial","speed","HomeTimeline","handlePin","columnId","removeColumn","addColumn","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","handleLoadMore","maxId","expandHomeTimeline","handleToggleAnnouncementsClick","stopPropagation","toggleShowAnnouncements","setTimeout","fetchAnnouncements","_checkIfReloadNeeded","prevProps","componentWillUnmount","_stopPolling","wasPartial","polling","setInterval","clearInterval","hasUnread","multiColumn","tooSlow","hasAnnouncements","unreadAnnouncements","showAnnouncements","pinned","signedIn","context","identity","banners","announcementsButton","type","IconWithBadge","CampaignIcon","count","criticalUpdatesPending","_jsxs","Column","bindToDocument","children","ColumnHeader","HomeIcon","onPin","onMove","extraButton","appendContent","AnnouncementsContainer","StatusListContainer","prepend","alwaysPrepend","trackScroll","scrollKey","onLoadMore","timelineId","emptyMessage","NotSignedInIndicator","Helmet","content","contextTypes"],"mappings":"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","file":"js/features/home_timeline-9f5b920ddeab13df18d3.chunk.js","sourcesContent":["var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgCampaign(_ref) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 48,\n    height: 48,\n    viewBox: \"0 -960 960 960\",\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M736.218-443.782v-72.436h169.783v72.436H736.218Zm63.566 296.783L662.957-248.87l43.913-58.174 136.262 101.305-43.348 58.74ZM709.87-653.956l-43.913-58.174 133.827-100.871 43.348 58.175-133.262 100.87ZM183.999-185.869v-160h-57q-30.967-2.261-51.984-25.291Q54-394.19 54-425.087v-109.826q0-32.91 23.436-56.347 23.437-23.436 56.347-23.436h170.391l218.653-130.74v530.872L304.173-345.869h-38.13v160h-82.044Zm259.044-168.61v-251.042L324.13-534.913H133.782v109.826H324.13l118.913 70.608Zm119.783 22.61v-296.827q33.218 25.695 53.109 64.435 19.892 38.739 19.892 84.261t-19.779 84.207q-19.778 38.684-53.222 63.924ZM288.695-480Z\"\n  })));\n}\nexport default __webpack_public_path__ + \"media/outlined/campaign-c40e8583.svg\";\nexport { SvgCampaign as ReactComponent };","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage, FormattedDate } from 'react-intl';\n\nimport classNames from 'classnames';\nimport { withRouter } from 'react-router-dom';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nimport { ReactComponent as AddIcon } from '@material-symbols/svg-600/outlined/add.svg';\nimport { ReactComponent as ChevronLeftIcon } from '@material-symbols/svg-600/outlined/chevron_left.svg';\nimport { ReactComponent as ChevronRightIcon } from '@material-symbols/svg-600/outlined/chevron_right.svg';\nimport TransitionMotion from 'react-motion/lib/TransitionMotion';\nimport spring from 'react-motion/lib/spring';\nimport ReactSwipeableViews from 'react-swipeable-views';\n\nimport elephantUIPlane from 'mastodon/../images/elephant_ui_plane.svg';\nimport { AnimatedNumber } from 'mastodon/components/animated_number';\nimport { Icon }  from 'mastodon/components/icon';\nimport { IconButton } from 'mastodon/components/icon_button';\nimport EmojiPickerDropdown from 'mastodon/features/compose/containers/emoji_picker_dropdown_container';\nimport { unicodeMapping } from 'mastodon/features/emoji/emoji_unicode_mapping_light';\nimport { autoPlayGif, reduceMotion, disableSwiping, mascot } from 'mastodon/initial_state';\nimport { assetHost } from 'mastodon/utils/config';\nimport { WithRouterPropTypes } from 'mastodon/utils/react_router';\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n  previous: { id: 'lightbox.previous', defaultMessage: 'Previous' },\n  next: { id: 'lightbox.next', defaultMessage: 'Next' },\n});\n\nclass ContentWithRouter extends ImmutablePureComponent {\n  static propTypes = {\n    announcement: ImmutablePropTypes.map.isRequired,\n    ...WithRouterPropTypes,\n  };\n\n  setRef = c => {\n    this.node = c;\n  };\n\n  componentDidMount () {\n    this._updateLinks();\n  }\n\n  componentDidUpdate () {\n    this._updateLinks();\n  }\n\n  _updateLinks () {\n    const node = this.node;\n\n    if (!node) {\n      return;\n    }\n\n    const links = node.querySelectorAll('a');\n\n    for (var i = 0; i < links.length; ++i) {\n      let link = links[i];\n\n      if (link.classList.contains('status-link')) {\n        continue;\n      }\n\n      link.classList.add('status-link');\n\n      let mention = this.props.announcement.get('mentions').find(item => link.href === item.get('url'));\n\n      if (mention) {\n        link.addEventListener('click', this.onMentionClick.bind(this, mention), false);\n        link.setAttribute('title', mention.get('acct'));\n      } else if (link.textContent[0] === '#' || (link.previousSibling && link.previousSibling.textContent && link.previousSibling.textContent[link.previousSibling.textContent.length - 1] === '#')) {\n        link.addEventListener('click', this.onHashtagClick.bind(this, link.text), false);\n      } else {\n        let status = this.props.announcement.get('statuses').find(item => link.href === item.get('url'));\n        if (status) {\n          link.addEventListener('click', this.onStatusClick.bind(this, status), false);\n        }\n        link.setAttribute('title', link.href);\n        link.classList.add('unhandled-link');\n      }\n\n      link.setAttribute('target', '_blank');\n      link.setAttribute('rel', 'noopener noreferrer');\n    }\n  }\n\n  onMentionClick = (mention, e) => {\n    if (this.props.history && e.button === 0 && !(e.ctrlKey || e.metaKey)) {\n      e.preventDefault();\n      this.props.history.push(`/@${mention.get('acct')}`);\n    }\n  };\n\n  onHashtagClick = (hashtag, e) => {\n    hashtag = hashtag.replace(/^#/, '');\n\n    if (this.props.history&& e.button === 0 && !(e.ctrlKey || e.metaKey)) {\n      e.preventDefault();\n      this.props.history.push(`/tags/${hashtag}`);\n    }\n  };\n\n  onStatusClick = (status, e) => {\n    if (this.props.history && e.button === 0 && !(e.ctrlKey || e.metaKey)) {\n      e.preventDefault();\n      this.props.history.push(`/@${status.getIn(['account', 'acct'])}/${status.get('id')}`);\n    }\n  };\n\n  handleMouseEnter = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-original');\n    }\n  };\n\n  handleMouseLeave = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-static');\n    }\n  };\n\n  render () {\n    const { announcement } = this.props;\n\n    return (\n      <div\n        className='announcements__item__content translate'\n        ref={this.setRef}\n        dangerouslySetInnerHTML={{ __html: announcement.get('contentHtml') }}\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      />\n    );\n  }\n\n}\n\nconst Content = withRouter(ContentWithRouter);\n\nclass Emoji extends PureComponent {\n\n  static propTypes = {\n    emoji: PropTypes.string.isRequired,\n    emojiMap: ImmutablePropTypes.map.isRequired,\n    hovered: PropTypes.bool.isRequired,\n  };\n\n  render () {\n    const { emoji, emojiMap, hovered } = this.props;\n\n    if (unicodeMapping[emoji]) {\n      const { filename, shortCode } = unicodeMapping[this.props.emoji];\n      const title = shortCode ? `:${shortCode}:` : '';\n\n      return (\n        <img\n          draggable='false'\n          className='emojione'\n          alt={emoji}\n          title={title}\n          src={`${assetHost}/emoji/${filename}.svg`}\n        />\n      );\n    } else if (emojiMap.get(emoji)) {\n      const filename  = (autoPlayGif || hovered) ? emojiMap.getIn([emoji, 'url']) : emojiMap.getIn([emoji, 'static_url']);\n      const shortCode = `:${emoji}:`;\n\n      return (\n        <img\n          draggable='false'\n          className='emojione custom-emoji'\n          alt={shortCode}\n          title={shortCode}\n          src={filename}\n        />\n      );\n    } else {\n      return null;\n    }\n  }\n\n}\n\nclass Reaction extends ImmutablePureComponent {\n\n  static propTypes = {\n    announcementId: PropTypes.string.isRequired,\n    reaction: ImmutablePropTypes.map.isRequired,\n    addReaction: PropTypes.func.isRequired,\n    removeReaction: PropTypes.func.isRequired,\n    emojiMap: ImmutablePropTypes.map.isRequired,\n    style: PropTypes.object,\n  };\n\n  state = {\n    hovered: false,\n  };\n\n  handleClick = () => {\n    const { reaction, announcementId, addReaction, removeReaction } = this.props;\n\n    if (reaction.get('me')) {\n      removeReaction(announcementId, reaction.get('name'));\n    } else {\n      addReaction(announcementId, reaction.get('name'));\n    }\n  };\n\n  handleMouseEnter = () => this.setState({ hovered: true });\n\n  handleMouseLeave = () => this.setState({ hovered: false });\n\n  render () {\n    const { reaction } = this.props;\n\n    let shortCode = reaction.get('name');\n\n    if (unicodeMapping[shortCode]) {\n      shortCode = unicodeMapping[shortCode].shortCode;\n    }\n\n    return (\n      <button className={classNames('reactions-bar__item', { active: reaction.get('me') })} onClick={this.handleClick} onMouseEnter={this.handleMouseEnter} onMouseLeave={this.handleMouseLeave} title={`:${shortCode}:`} style={this.props.style}>\n        <span className='reactions-bar__item__emoji'><Emoji hovered={this.state.hovered} emoji={reaction.get('name')} emojiMap={this.props.emojiMap} /></span>\n        <span className='reactions-bar__item__count'><AnimatedNumber value={reaction.get('count')} /></span>\n      </button>\n    );\n  }\n\n}\n\nclass ReactionsBar extends ImmutablePureComponent {\n\n  static propTypes = {\n    announcementId: PropTypes.string.isRequired,\n    reactions: ImmutablePropTypes.list.isRequired,\n    addReaction: PropTypes.func.isRequired,\n    removeReaction: PropTypes.func.isRequired,\n    emojiMap: ImmutablePropTypes.map.isRequired,\n  };\n\n  handleEmojiPick = data => {\n    const { addReaction, announcementId } = this.props;\n    addReaction(announcementId, data.native.replace(/:/g, ''));\n  };\n\n  willEnter () {\n    return { scale: reduceMotion ? 1 : 0 };\n  }\n\n  willLeave () {\n    return { scale: reduceMotion ? 0 : spring(0, { stiffness: 170, damping: 26 }) };\n  }\n\n  render () {\n    const { reactions } = this.props;\n    const visibleReactions = reactions.filter(x => x.get('count') > 0);\n\n    const styles = visibleReactions.map(reaction => ({\n      key: reaction.get('name'),\n      data: reaction,\n      style: { scale: reduceMotion ? 1 : spring(1, { stiffness: 150, damping: 13 }) },\n    })).toArray();\n\n    return (\n      <TransitionMotion styles={styles} willEnter={this.willEnter} willLeave={this.willLeave}>\n        {items => (\n          <div className={classNames('reactions-bar', { 'reactions-bar--empty': visibleReactions.isEmpty() })}>\n            {items.map(({ key, data, style }) => (\n              <Reaction\n                key={key}\n                reaction={data}\n                style={{ transform: `scale(${style.scale})`, position: style.scale < 0.5 ? 'absolute' : 'static' }}\n                announcementId={this.props.announcementId}\n                addReaction={this.props.addReaction}\n                removeReaction={this.props.removeReaction}\n                emojiMap={this.props.emojiMap}\n              />\n            ))}\n\n            {visibleReactions.size < 8 && <EmojiPickerDropdown onPickEmoji={this.handleEmojiPick} button={<Icon id='plus' icon={AddIcon} />} />}\n          </div>\n        )}\n      </TransitionMotion>\n    );\n  }\n\n}\n\nclass Announcement extends ImmutablePureComponent {\n\n  static propTypes = {\n    announcement: ImmutablePropTypes.map.isRequired,\n    emojiMap: ImmutablePropTypes.map.isRequired,\n    addReaction: PropTypes.func.isRequired,\n    removeReaction: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    selected: PropTypes.bool,\n  };\n\n  state = {\n    unread: !this.props.announcement.get('read'),\n  };\n\n  componentDidUpdate () {\n    const { selected, announcement } = this.props;\n    if (!selected && this.state.unread !== !announcement.get('read')) {\n      this.setState({ unread: !announcement.get('read') });\n    }\n  }\n\n  render () {\n    const { announcement } = this.props;\n    const { unread } = this.state;\n    const startsAt = announcement.get('starts_at') && new Date(announcement.get('starts_at'));\n    const endsAt = announcement.get('ends_at') && new Date(announcement.get('ends_at'));\n    const now = new Date();\n    const hasTimeRange = startsAt && endsAt;\n    const skipYear = hasTimeRange && startsAt.getFullYear() === endsAt.getFullYear() && endsAt.getFullYear() === now.getFullYear();\n    const skipEndDate = hasTimeRange && startsAt.getDate() === endsAt.getDate() && startsAt.getMonth() === endsAt.getMonth() && startsAt.getFullYear() === endsAt.getFullYear();\n    const skipTime = announcement.get('all_day');\n\n    return (\n      <div className='announcements__item'>\n        <strong className='announcements__item__range'>\n          <FormattedMessage id='announcement.announcement' defaultMessage='Announcement' />\n          {hasTimeRange && <span> · <FormattedDate value={startsAt} hour12={false} year={(skipYear || startsAt.getFullYear() === now.getFullYear()) ? undefined : 'numeric'} month='short' day='2-digit' hour={skipTime ? undefined : '2-digit'} minute={skipTime ? undefined : '2-digit'} /> - <FormattedDate value={endsAt} hour12={false} year={(skipYear || endsAt.getFullYear() === now.getFullYear()) ? undefined : 'numeric'} month={skipEndDate ? undefined : 'short'} day={skipEndDate ? undefined : '2-digit'} hour={skipTime ? undefined : '2-digit'} minute={skipTime ? undefined : '2-digit'} /></span>}\n        </strong>\n\n        <Content announcement={announcement} />\n\n        <ReactionsBar\n          reactions={announcement.get('reactions')}\n          announcementId={announcement.get('id')}\n          addReaction={this.props.addReaction}\n          removeReaction={this.props.removeReaction}\n          emojiMap={this.props.emojiMap}\n        />\n\n        {unread && <span className='announcements__item__unread' />}\n      </div>\n    );\n  }\n\n}\n\nclass Announcements extends ImmutablePureComponent {\n\n  static propTypes = {\n    announcements: ImmutablePropTypes.list,\n    emojiMap: ImmutablePropTypes.map.isRequired,\n    dismissAnnouncement: PropTypes.func.isRequired,\n    addReaction: PropTypes.func.isRequired,\n    removeReaction: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  state = {\n    index: 0,\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.announcements.size > 0 && state.index >= props.announcements.size) {\n      return { index: props.announcements.size - 1 };\n    } else {\n      return null;\n    }\n  }\n\n  componentDidMount () {\n    this._markAnnouncementAsRead();\n  }\n\n  componentDidUpdate () {\n    this._markAnnouncementAsRead();\n  }\n\n  _markAnnouncementAsRead () {\n    const { dismissAnnouncement, announcements } = this.props;\n    const { index } = this.state;\n    const announcement = announcements.get(announcements.size - 1 - index);\n    if (!announcement.get('read')) dismissAnnouncement(announcement.get('id'));\n  }\n\n  handleChangeIndex = index => {\n    this.setState({ index: index % this.props.announcements.size });\n  };\n\n  handleNextClick = () => {\n    this.setState({ index: (this.state.index + 1) % this.props.announcements.size });\n  };\n\n  handlePrevClick = () => {\n    this.setState({ index: (this.props.announcements.size + this.state.index - 1) % this.props.announcements.size });\n  };\n\n  render () {\n    const { announcements, intl } = this.props;\n    const { index } = this.state;\n\n    if (announcements.isEmpty()) {\n      return null;\n    }\n\n    return (\n      <div className='announcements'>\n        <img className='announcements__mastodon' alt='' draggable='false' src={mascot || elephantUIPlane} />\n\n        <div className='announcements__container'>\n          <ReactSwipeableViews animateHeight animateTransitions={!reduceMotion} index={index} onChangeIndex={this.handleChangeIndex}>\n            {announcements.map((announcement, idx) => (\n              <Announcement\n                key={announcement.get('id')}\n                announcement={announcement}\n                emojiMap={this.props.emojiMap}\n                addReaction={this.props.addReaction}\n                removeReaction={this.props.removeReaction}\n                intl={intl}\n                selected={index === idx}\n                disabled={disableSwiping}\n              />\n            )).reverse()}\n          </ReactSwipeableViews>\n\n          {announcements.size > 1 && (\n            <div className='announcements__pagination'>\n              <IconButton disabled={announcements.size === 1} title={intl.formatMessage(messages.previous)} icon='chevron-left' iconComponent={ChevronLeftIcon} onClick={this.handlePrevClick} size={13} />\n              <span>{index + 1} / {announcements.size}</span>\n              <IconButton disabled={announcements.size === 1} title={intl.formatMessage(messages.next)} icon='chevron-right' iconComponent={ChevronRightIcon} onClick={this.handleNextClick} size={13} />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default injectIntl(Announcements);\n","import { Map as ImmutableMap } from 'immutable';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport { addReaction, removeReaction, dismissAnnouncement } from 'mastodon/actions/announcements';\n\nimport Announcements from '../components/announcements';\n\nconst customEmojiMap = createSelector([state => state.get('custom_emojis')], items => items.reduce((map, emoji) => map.set(emoji.get('shortcode'), emoji), ImmutableMap()));\n\nconst mapStateToProps = state => ({\n  announcements: state.getIn(['announcements', 'items']),\n  emojiMap: customEmojiMap(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  dismissAnnouncement: id => dispatch(dismissAnnouncement(id)),\n  addReaction: (id, name) => dispatch(addReaction(id, name)),\n  removeReaction: (id, name) => dispatch(removeReaction(id, name)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Announcements);\n","/* eslint-disable @typescript-eslint/no-unsafe-call,\n                  @typescript-eslint/no-unsafe-return,\n                  @typescript-eslint/no-unsafe-assignment,\n                  @typescript-eslint/no-unsafe-member-access\n                  -- the settings store is not yet typed */\nimport { useCallback } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { useAppSelector, useAppDispatch } from 'mastodon/store';\n\nimport { changeSetting } from '../../../actions/settings';\nimport SettingToggle from '../../notifications/components/setting_toggle';\n\nexport const ColumnSettings: React.FC = () => {\n  const settings = useAppSelector((state) => state.settings.get('home'));\n\n  const dispatch = useAppDispatch();\n  const onChange = useCallback(\n    (key: string, checked: boolean) => {\n      dispatch(changeSetting(['home', ...key], checked));\n    },\n    [dispatch],\n  );\n\n  return (\n    <div>\n      <span className='column-settings__section'>\n        <FormattedMessage\n          id='home.column_settings.basic'\n          defaultMessage='Basic'\n        />\n      </span>\n\n      <div className='column-settings__row'>\n        <SettingToggle\n          prefix='home_timeline'\n          settings={settings}\n          settingPath={['shows', 'reblog']}\n          onChange={onChange}\n          label={\n            <FormattedMessage\n              id='home.column_settings.show_reblogs'\n              defaultMessage='Show boosts'\n            />\n          }\n        />\n      </div>\n\n      <div className='column-settings__row'>\n        <SettingToggle\n          prefix='home_timeline'\n          settings={settings}\n          settingPath={['shows', 'reply']}\n          onChange={onChange}\n          label={\n            <FormattedMessage\n              id='home.column_settings.show_replies'\n              defaultMessage='Show replies'\n            />\n          }\n        />\n      </div>\n    </div>\n  );\n};\n","import { FormattedMessage } from 'react-intl';\n\nexport const CriticalUpdateBanner = () => (\n  <div className='warning-banner'>\n    <div className='warning-banner__message'>\n      <h1>\n        <FormattedMessage\n          id='home.pending_critical_update.title'\n          defaultMessage='Critical security update available!'\n        />\n      </h1>\n      <p>\n        <FormattedMessage\n          id='home.pending_critical_update.body'\n          defaultMessage='Please update your Mastodon server as soon as possible!'\n        />{' '}\n        <a href='/admin/software_updates'>\n          <FormattedMessage\n            id='home.pending_critical_update.link'\n            defaultMessage='See updates'\n          />\n        </a>\n      </p>\n    </div>\n  </div>\n);\n","import { FormattedMessage } from 'react-intl';\n\nimport { Link } from 'react-router-dom';\n\nimport background from 'mastodon/../images/friends-cropped.png';\nimport { DismissableBanner } from 'mastodon/components/dismissable_banner';\n\nexport const ExplorePrompt = () => (\n  <DismissableBanner id='home.explore_prompt'>\n    <img\n      src={background}\n      alt=''\n      className='dismissable-banner__background-image'\n    />\n\n    <h1>\n      <FormattedMessage\n        id='home.explore_prompt.title'\n        defaultMessage='This is your home base within Mastodon.'\n      />\n    </h1>\n    <p>\n      <FormattedMessage\n        id='home.explore_prompt.body'\n        defaultMessage=\"Your home feed will have a mix of posts from the hashtags you've chosen to follow, the people you've chosen to follow, and the posts they boost. If that feels too quiet, you may want to:\"\n      />\n    </p>\n\n    <div className='dismissable-banner__message__wrapper'>\n      <div className='dismissable-banner__message__actions'>\n        <Link to='/explore' className='button'>\n          <FormattedMessage\n            id='home.actions.go_to_explore'\n            defaultMessage=\"See what's trending\"\n          />\n        </Link>\n        <Link to='/explore/suggestions' className='button button-tertiary'>\n          <FormattedMessage\n            id='home.actions.go_to_suggestions'\n            defaultMessage='Find people to follow'\n          />\n        </Link>\n      </div>\n    </div>\n  </DismissableBanner>\n);\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport classNames from 'classnames';\nimport { Helmet } from 'react-helmet';\n\nimport { List as ImmutableList } from 'immutable';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport { ReactComponent as CampaignIcon } from '@material-symbols/svg-600/outlined/campaign.svg';\nimport { ReactComponent as HomeIcon } from '@material-symbols/svg-600/outlined/home-fill.svg';\n\nimport { fetchAnnouncements, toggleShowAnnouncements } from 'mastodon/actions/announcements';\nimport { IconWithBadge } from 'mastodon/components/icon_with_badge';\nimport { NotSignedInIndicator } from 'mastodon/components/not_signed_in_indicator';\nimport AnnouncementsContainer from 'mastodon/features/getting_started/containers/announcements_container';\nimport { me, criticalUpdatesPending } from 'mastodon/initial_state';\n\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport { expandHomeTimeline } from '../../actions/timelines';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport StatusListContainer from '../ui/containers/status_list_container';\n\nimport { ColumnSettings } from './components/column_settings';\nimport { CriticalUpdateBanner } from './components/critical_update_banner';\nimport { ExplorePrompt } from './components/explore_prompt';\n\nconst messages = defineMessages({\n  title: { id: 'column.home', defaultMessage: 'Home' },\n  show_announcements: { id: 'home.show_announcements', defaultMessage: 'Show announcements' },\n  hide_announcements: { id: 'home.hide_announcements', defaultMessage: 'Hide announcements' },\n});\n\nconst getHomeFeedSpeed = createSelector([\n  state => state.getIn(['timelines', 'home', 'items'], ImmutableList()),\n  state => state.getIn(['timelines', 'home', 'pendingItems'], ImmutableList()),\n  state => state.get('statuses'),\n], (statusIds, pendingStatusIds, statusMap) => {\n  const recentStatusIds = pendingStatusIds.concat(statusIds);\n  const statuses = recentStatusIds.filter(id => id !== null).map(id => statusMap.get(id)).filter(status => status?.get('account') !== me).take(20);\n\n  if (statuses.isEmpty()) {\n    return {\n      gap: 0,\n      newest: new Date(0),\n    };\n  }\n\n  const datetimes = statuses.map(status => status.get('created_at', 0));\n  const oldest = new Date(datetimes.min());\n  const newest = new Date(datetimes.max());\n  const averageGap = (newest - oldest) / (1000 * (statuses.size + 1)); // Average gap between posts on first page in seconds\n\n  return {\n    gap: averageGap,\n    newest,\n  };\n});\n\nconst homeTooSlow = createSelector([\n  state => state.getIn(['timelines', 'home', 'isLoading']),\n  state => state.getIn(['timelines', 'home', 'isPartial']),\n  getHomeFeedSpeed,\n], (isLoading, isPartial, speed) =>\n  !isLoading && !isPartial // Only if the home feed has finished loading\n  && (\n    (speed.gap > (30 * 60) // If the average gap between posts is more than 30 minutes\n    || (Date.now() - speed.newest) > (1000 * 3600)) // If the most recent post is from over an hour ago\n  )\n);\n\nconst mapStateToProps = state => ({\n  hasUnread: state.getIn(['timelines', 'home', 'unread']) > 0,\n  isPartial: state.getIn(['timelines', 'home', 'isPartial']),\n  hasAnnouncements: !state.getIn(['announcements', 'items']).isEmpty(),\n  unreadAnnouncements: state.getIn(['announcements', 'items']).count(item => !item.get('read')),\n  showAnnouncements: state.getIn(['announcements', 'show']),\n  tooSlow: homeTooSlow(state),\n});\n\nclass HomeTimeline extends PureComponent {\n\n  static contextTypes = {\n    identity: PropTypes.object,\n  };\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    hasUnread: PropTypes.bool,\n    isPartial: PropTypes.bool,\n    columnId: PropTypes.string,\n    multiColumn: PropTypes.bool,\n    hasAnnouncements: PropTypes.bool,\n    unreadAnnouncements: PropTypes.number,\n    showAnnouncements: PropTypes.bool,\n    tooSlow: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('HOME', {}));\n    }\n  };\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandHomeTimeline({ maxId }));\n  };\n\n  componentDidMount () {\n    setTimeout(() => this.props.dispatch(fetchAnnouncements()), 700);\n    this._checkIfReloadNeeded(false, this.props.isPartial);\n  }\n\n  componentDidUpdate (prevProps) {\n    this._checkIfReloadNeeded(prevProps.isPartial, this.props.isPartial);\n  }\n\n  componentWillUnmount () {\n    this._stopPolling();\n  }\n\n  _checkIfReloadNeeded (wasPartial, isPartial) {\n    const { dispatch } = this.props;\n\n    if (wasPartial === isPartial) {\n      return;\n    } else if (!wasPartial && isPartial) {\n      this.polling = setInterval(() => {\n        dispatch(expandHomeTimeline());\n      }, 3000);\n    } else if (wasPartial && !isPartial) {\n      this._stopPolling();\n    }\n  }\n\n  _stopPolling () {\n    if (this.polling) {\n      clearInterval(this.polling);\n      this.polling = null;\n    }\n  }\n\n  handleToggleAnnouncementsClick = (e) => {\n    e.stopPropagation();\n    this.props.dispatch(toggleShowAnnouncements());\n  };\n\n  render () {\n    const { intl, hasUnread, columnId, multiColumn, tooSlow, hasAnnouncements, unreadAnnouncements, showAnnouncements } = this.props;\n    const pinned = !!columnId;\n    const { signedIn } = this.context.identity;\n    const banners = [];\n\n    let announcementsButton;\n\n    if (hasAnnouncements) {\n      announcementsButton = (\n        <button\n          type='button'\n          className={classNames('column-header__button', { 'active': showAnnouncements })}\n          title={intl.formatMessage(showAnnouncements ? messages.hide_announcements : messages.show_announcements)}\n          aria-label={intl.formatMessage(showAnnouncements ? messages.hide_announcements : messages.show_announcements)}\n          onClick={this.handleToggleAnnouncementsClick}\n        >\n          <IconWithBadge id='bullhorn' icon={CampaignIcon} count={unreadAnnouncements} />\n        </button>\n      );\n    }\n\n    if (criticalUpdatesPending) {\n      banners.push(<CriticalUpdateBanner key='critical-update-banner' />);\n    }\n\n    if (tooSlow) {\n      banners.push(<ExplorePrompt key='explore-prompt' />);\n    }\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='home'\n          iconComponent={HomeIcon}\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n          extraButton={announcementsButton}\n          appendContent={hasAnnouncements && showAnnouncements && <AnnouncementsContainer />}\n        >\n          <ColumnSettings />\n        </ColumnHeader>\n\n        {signedIn ? (\n          <StatusListContainer\n            prepend={banners}\n            alwaysPrepend\n            trackScroll={!pinned}\n            scrollKey={`home_timeline-${columnId}`}\n            onLoadMore={this.handleLoadMore}\n            timelineId='home'\n            emptyMessage={<FormattedMessage id='empty_column.home' defaultMessage='Your home timeline is empty! Follow more people to fill it up.' />}\n            bindToDocument={!multiColumn}\n          />\n        ) : <NotSignedInIndicator />}\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(injectIntl(HomeTimeline));\n"],"sourceRoot":""}