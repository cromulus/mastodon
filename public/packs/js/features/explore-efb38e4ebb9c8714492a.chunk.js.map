{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/explore/components/story.jsx","webpack:///./app/javascript/mastodon/features/explore/links.jsx","webpack:///./app/javascript/mastodon/features/explore/results.jsx","webpack:///./app/javascript/mastodon/features/explore/statuses.jsx","webpack:///./app/javascript/mastodon/features/explore/suggestions.jsx","webpack:///./app/javascript/mastodon/features/explore/tags.jsx","webpack:///./app/javascript/mastodon/features/explore/index.jsx"],"names":["Story","PureComponent","constructor","arguments","state","thumbnailLoaded","handleImageLoad","this","setState","render","expanded","url","title","lang","publisher","author","publishedAt","sharedTimes","thumbnail","thumbnailDescription","blurhash","props","_jsx","className","classNames","href","target","rel","Skeleton","width","_jsxs","_Fragment","children","RelativeTimestamp","timestamp","FormattedMessage","id","defaultMessage","values","name","ShortNumber","value","renderer","accountsCountRenderer","Blurhash","hash","src","onLoad","alt","Links","componentDidMount","dispatch","links","history","action","size","fetchTrendingLinks","isLoading","banner","DismissableBanner","isEmpty","LoadingIndicator","map","link","i","get","getIn","connect","withRouter","messages","defineMessages","hidePeek","list","skipLast","Results","type","submittedType","handleSelectAll","submitSearch","handleSelectAccounts","handleSelectHashtags","handleSelectStatuses","handleLoadMoreAccounts","_loadMore","handleLoadMoreStatuses","handleLoadMoreHashtags","handleLoadMore","getDerivedStateFromProps","expandSearch","intl","q","results","hasMore","ImmutableList","filteredResults","accounts","hashtags","statuses","SearchSection","Icon","icon","PeopleIcon","onClickMore","take","Account","TagIcon","hashtag","Hashtag","FindInPageIcon","Status","renderAccounts","renderHashtags","renderStatuses","onClick","undefined","ScrollableList","scrollKey","onLoadMore","emptyMessage","bindToDocument","Helmet","formatMessage","injectIntl","Statuses","_debounce","expandTrendingStatuses","leading","statusIds","fetchTrendingStatuses","multiColumn","StatusList","trackScroll","prepend","alwaysPrepend","timelineId","withCounters","getStatusList","Suggestions","suggestions","fetchSuggestions","suggestion","AccountCard","Tags","fetchTrendingHashtags","isLoadingHashtags","searchResults","Explore","handleHeaderClick","column","scrollTop","setRef","c","isSearching","signedIn","context","identity","Column","ref","label","ColumnHeader","iconComponent","SearchIcon","Search","SearchResults","NavLink","exact","to","tagName","Switch","Route","path","component","content","contextTypes","PropTypes","object","layout","trendsEnabled"],"mappings":"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","file":"js/features/explore-efb38e4ebb9c8714492a.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport classNames from 'classnames';\n\nimport { Blurhash } from 'mastodon/components/blurhash';\nimport { accountsCountRenderer } from 'mastodon/components/hashtag';\nimport { RelativeTimestamp } from 'mastodon/components/relative_timestamp';\nimport { ShortNumber } from 'mastodon/components/short_number';\nimport { Skeleton } from 'mastodon/components/skeleton';\n\nexport default class Story extends PureComponent {\n\n  static propTypes = {\n    url: PropTypes.string,\n    title: PropTypes.string,\n    lang: PropTypes.string,\n    publisher: PropTypes.string,\n    publishedAt: PropTypes.string,\n    author: PropTypes.string,\n    sharedTimes: PropTypes.number,\n    thumbnail: PropTypes.string,\n    thumbnailDescription: PropTypes.string,\n    blurhash: PropTypes.string,\n    expanded: PropTypes.bool,\n  };\n\n  state = {\n    thumbnailLoaded: false,\n  };\n\n  handleImageLoad = () => this.setState({ thumbnailLoaded: true });\n\n  render () {\n    const { expanded, url, title, lang, publisher, author, publishedAt, sharedTimes, thumbnail, thumbnailDescription, blurhash } = this.props;\n\n    const { thumbnailLoaded } = this.state;\n\n    return (\n      <a className={classNames('story', { expanded })} href={url} target='blank' rel='noopener'>\n        <div className='story__details'>\n          <div className='story__details__publisher'>{publisher ? <span lang={lang}>{publisher}</span> : <Skeleton width={50} />}{publishedAt && <> · <RelativeTimestamp timestamp={publishedAt} /></>}</div>\n          <div className='story__details__title' lang={lang}>{title ? title : <Skeleton />}</div>\n          <div className='story__details__shared'>{author && <><FormattedMessage id='link_preview.author' defaultMessage='By {name}' values={{ name: <strong>{author}</strong> }} /> · </>}{typeof sharedTimes === 'number' ? <ShortNumber value={sharedTimes} renderer={accountsCountRenderer} /> : <Skeleton width={100} />}</div>\n        </div>\n\n        <div className='story__thumbnail'>\n          {thumbnail ? (\n            <>\n              <div className={classNames('story__thumbnail__preview', { 'story__thumbnail__preview--hidden': thumbnailLoaded })}><Blurhash hash={blurhash} /></div>\n              <img src={thumbnail} onLoad={this.handleImageLoad} alt={thumbnailDescription} title={thumbnailDescription} lang={lang} />\n            </>\n          ) : <Skeleton />}\n        </div>\n      </a>\n    );\n  }\n\n}\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { withRouter } from 'react-router-dom';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport { fetchTrendingLinks } from 'mastodon/actions/trends';\nimport { DismissableBanner } from 'mastodon/components/dismissable_banner';\nimport { LoadingIndicator } from 'mastodon/components/loading_indicator';\nimport { WithRouterPropTypes } from 'mastodon/utils/react_router';\n\nimport Story from './components/story';\n\nconst mapStateToProps = state => ({\n  links: state.getIn(['trends', 'links', 'items']),\n  isLoading: state.getIn(['trends', 'links', 'isLoading']),\n});\n\nclass Links extends PureComponent {\n\n  static propTypes = {\n    links: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    dispatch: PropTypes.func.isRequired,\n    ...WithRouterPropTypes,\n  };\n\n  componentDidMount () {\n    const { dispatch, links, history } = this.props;\n\n    // If we're navigating back to the screen, do not trigger a reload\n    if (history.action === 'POP' && links.size > 0) {\n      return;\n    }\n\n    dispatch(fetchTrendingLinks());\n  }\n\n  render () {\n    const { isLoading, links } = this.props;\n\n    const banner = (\n      <DismissableBanner id='explore/links'>\n        <FormattedMessage id='dismissable_banner.explore_links' defaultMessage='These are news stories being shared the most on the social web today. Newer news stories posted by more different people are ranked higher.' />\n      </DismissableBanner>\n    );\n\n    if (!isLoading && links.isEmpty()) {\n      return (\n        <div className='explore__links scrollable scrollable--flex'>\n          {banner}\n\n          <div className='empty-column-indicator'>\n            <FormattedMessage id='empty_column.explore_statuses' defaultMessage='Nothing is trending right now. Check back later!' />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className='explore__links scrollable' data-nosnippet>\n        {banner}\n\n        {isLoading ? (<LoadingIndicator />) : links.map((link, i) => (\n          <Story\n            key={link.get('id')}\n            expanded={i === 0}\n            lang={link.get('language')}\n            url={link.get('url')}\n            title={link.get('title')}\n            publisher={link.get('provider_name')}\n            publishedAt={link.get('published_at')}\n            author={link.get('author_name')}\n            sharedTimes={link.getIn(['history', 0, 'accounts']) * 1 + link.getIn(['history', 1, 'accounts']) * 1}\n            thumbnail={link.get('image')}\n            thumbnailDescription={link.get('image_description')}\n            blurhash={link.get('blurhash')}\n          />\n        ))}\n      </div>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(withRouter(Links));\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { injectIntl, defineMessages, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport { List as ImmutableList } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport { ReactComponent as FindInPageIcon } from '@material-symbols/svg-600/outlined/find_in_page.svg';\nimport { ReactComponent as PeopleIcon } from '@material-symbols/svg-600/outlined/group.svg';\nimport { ReactComponent as TagIcon } from '@material-symbols/svg-600/outlined/tag.svg';\n\nimport { submitSearch, expandSearch } from 'mastodon/actions/search';\nimport { ImmutableHashtag as Hashtag } from 'mastodon/components/hashtag';\nimport { Icon } from 'mastodon/components/icon';\nimport ScrollableList from 'mastodon/components/scrollable_list';\nimport Account from 'mastodon/containers/account_container';\nimport Status from 'mastodon/containers/status_container';\n\nimport { SearchSection } from './components/search_section';\n\nconst messages = defineMessages({\n  title: { id: 'search_results.title', defaultMessage: 'Search for {q}' },\n});\n\nconst mapStateToProps = state => ({\n  isLoading: state.getIn(['search', 'isLoading']),\n  results: state.getIn(['search', 'results']),\n  q: state.getIn(['search', 'searchTerm']),\n  submittedType: state.getIn(['search', 'type']),\n});\n\nconst INITIAL_PAGE_LIMIT = 10;\nconst INITIAL_DISPLAY = 4;\n\nconst hidePeek = list => {\n  if (list.size > INITIAL_PAGE_LIMIT && list.size % INITIAL_PAGE_LIMIT === 1) {\n    return list.skipLast(1);\n  } else {\n    return list;\n  }\n};\n\nconst renderAccounts = accounts => hidePeek(accounts).map(id => (\n  <Account key={id} id={id} />\n));\n\nconst renderHashtags = hashtags => hidePeek(hashtags).map(hashtag => (\n  <Hashtag key={hashtag.get('name')} hashtag={hashtag} />\n));\n\nconst renderStatuses = statuses => hidePeek(statuses).map(id => (\n  <Status key={id} id={id} />\n));\n\nclass Results extends PureComponent {\n\n  static propTypes = {\n    results: ImmutablePropTypes.contains({\n      accounts: ImmutablePropTypes.orderedSet,\n      statuses: ImmutablePropTypes.orderedSet,\n      hashtags: ImmutablePropTypes.orderedSet,\n    }),\n    isLoading: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    dispatch: PropTypes.func.isRequired,\n    q: PropTypes.string,\n    intl: PropTypes.object,\n    submittedType: PropTypes.oneOf(['accounts', 'statuses', 'hashtags']),\n  };\n\n  state = {\n    type: this.props.submittedType || 'all',\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.submittedType !== state.type) {\n      return {\n        type: props.submittedType || 'all',\n      };\n    }\n\n    return null;\n  }\n\n  handleSelectAll = () => {\n    const { submittedType, dispatch } = this.props;\n\n    // If we originally searched for a specific type, we need to resubmit\n    // the query to get all types of results\n    if (submittedType) {\n      dispatch(submitSearch());\n    }\n\n    this.setState({ type: 'all' });\n  };\n\n  handleSelectAccounts = () => {\n    const { submittedType, dispatch } = this.props;\n\n    // If we originally searched for something else (but not everything),\n    // we need to resubmit the query for this specific type\n    if (submittedType !== 'accounts') {\n      dispatch(submitSearch('accounts'));\n    }\n\n    this.setState({ type: 'accounts' });\n  };\n\n  handleSelectHashtags = () => {\n    const { submittedType, dispatch } = this.props;\n\n    // If we originally searched for something else (but not everything),\n    // we need to resubmit the query for this specific type\n    if (submittedType !== 'hashtags') {\n      dispatch(submitSearch('hashtags'));\n    }\n\n    this.setState({ type: 'hashtags' });\n  };\n\n  handleSelectStatuses = () => {\n    const { submittedType, dispatch } = this.props;\n\n    // If we originally searched for something else (but not everything),\n    // we need to resubmit the query for this specific type\n    if (submittedType !== 'statuses') {\n      dispatch(submitSearch('statuses'));\n    }\n\n    this.setState({ type: 'statuses' });\n  };\n\n  handleLoadMoreAccounts = () => this._loadMore('accounts');\n  handleLoadMoreStatuses = () => this._loadMore('statuses');\n  handleLoadMoreHashtags = () => this._loadMore('hashtags');\n\n  _loadMore (type) {\n    const { dispatch } = this.props;\n    dispatch(expandSearch(type));\n  }\n\n  handleLoadMore = () => {\n    const { type } = this.state;\n\n    if (type !== 'all') {\n      this._loadMore(type);\n    }\n  };\n\n  render () {\n    const { intl, isLoading, q, results } = this.props;\n    const { type } = this.state;\n\n    // We request 1 more result than we display so we can tell if there'd be a next page\n    const hasMore = type !== 'all' ? results.get(type, ImmutableList()).size > INITIAL_PAGE_LIMIT && results.get(type).size % INITIAL_PAGE_LIMIT === 1 : false;\n\n    let filteredResults;\n\n    const accounts = results.get('accounts', ImmutableList());\n    const hashtags = results.get('hashtags', ImmutableList());\n    const statuses = results.get('statuses', ImmutableList());\n\n    switch(type) {\n    case 'all':\n      filteredResults = (accounts.size + hashtags.size + statuses.size) > 0 ? (\n        <>\n          {accounts.size > 0 && (\n            <SearchSection key='accounts' title={<><Icon id='users' icon={PeopleIcon} /><FormattedMessage id='search_results.accounts' defaultMessage='Profiles' /></>} onClickMore={this.handleLoadMoreAccounts}>\n              {accounts.take(INITIAL_DISPLAY).map(id => <Account key={id} id={id} />)}\n            </SearchSection>\n          )}\n\n          {hashtags.size > 0 && (\n            <SearchSection key='hashtags' title={<><Icon id='hashtag' icon={TagIcon} /><FormattedMessage id='search_results.hashtags' defaultMessage='Hashtags' /></>} onClickMore={this.handleLoadMoreHashtags}>\n              {hashtags.take(INITIAL_DISPLAY).map(hashtag => <Hashtag key={hashtag.get('name')} hashtag={hashtag} />)}\n            </SearchSection>\n          )}\n\n          {statuses.size > 0 && (\n            <SearchSection key='statuses' title={<><Icon id='quote-right' icon={FindInPageIcon} /><FormattedMessage id='search_results.statuses' defaultMessage='Posts' /></>} onClickMore={this.handleLoadMoreStatuses}>\n              {statuses.take(INITIAL_DISPLAY).map(id => <Status key={id} id={id} />)}\n            </SearchSection>\n          )}\n        </>\n      ) : [];\n      break;\n    case 'accounts':\n      filteredResults = renderAccounts(accounts);\n      break;\n    case 'hashtags':\n      filteredResults = renderHashtags(hashtags);\n      break;\n    case 'statuses':\n      filteredResults = renderStatuses(statuses);\n      break;\n    }\n\n    return (\n      <>\n        <div className='account__section-headline'>\n          <button onClick={this.handleSelectAll} className={type === 'all' ? 'active' : undefined}><FormattedMessage id='search_results.all' defaultMessage='All' /></button>\n          <button onClick={this.handleSelectAccounts} className={type === 'accounts' ? 'active' : undefined}><FormattedMessage id='search_results.accounts' defaultMessage='Profiles' /></button>\n          <button onClick={this.handleSelectHashtags} className={type === 'hashtags' ? 'active' : undefined}><FormattedMessage id='search_results.hashtags' defaultMessage='Hashtags' /></button>\n          <button onClick={this.handleSelectStatuses} className={type === 'statuses' ? 'active' : undefined}><FormattedMessage id='search_results.statuses' defaultMessage='Posts' /></button>\n        </div>\n\n        <div className='explore__search-results' data-nosnippet>\n          <ScrollableList\n            scrollKey='search-results'\n            isLoading={isLoading}\n            onLoadMore={this.handleLoadMore}\n            hasMore={hasMore}\n            emptyMessage={<FormattedMessage id='search_results.nothing_found' defaultMessage='Could not find anything for these search terms' />}\n            bindToDocument\n          >\n            {filteredResults}\n          </ScrollableList>\n        </div>\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title, { q })}</title>\n        </Helmet>\n      </>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(injectIntl(Results));\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { withRouter } from 'react-router-dom';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport { debounce } from 'lodash';\n\n\nimport { fetchTrendingStatuses, expandTrendingStatuses } from 'mastodon/actions/trends';\nimport { DismissableBanner } from 'mastodon/components/dismissable_banner';\nimport StatusList from 'mastodon/components/status_list';\nimport { getStatusList } from 'mastodon/selectors';\nimport { WithRouterPropTypes } from 'mastodon/utils/react_router';\n\nconst mapStateToProps = state => ({\n  statusIds: getStatusList(state, 'trending'),\n  isLoading: state.getIn(['status_lists', 'trending', 'isLoading'], true),\n  hasMore: !!state.getIn(['status_lists', 'trending', 'next']),\n});\n\nclass Statuses extends PureComponent {\n\n  static propTypes = {\n    statusIds: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    dispatch: PropTypes.func.isRequired,\n    ...WithRouterPropTypes,\n  };\n\n  componentDidMount () {\n    const { dispatch, statusIds, history } = this.props;\n\n    // If we're navigating back to the screen, do not trigger a reload\n    if (history.action === 'POP' && statusIds.size > 0) {\n      return;\n    }\n\n    dispatch(fetchTrendingStatuses());\n  }\n\n  handleLoadMore = debounce(() => {\n    const { dispatch } = this.props;\n    dispatch(expandTrendingStatuses());\n  }, 300, { leading: true });\n\n  render () {\n    const { isLoading, hasMore, statusIds, multiColumn } = this.props;\n\n    const emptyMessage = <FormattedMessage id='empty_column.explore_statuses' defaultMessage='Nothing is trending right now. Check back later!' />;\n\n    return (\n      <StatusList\n        trackScroll\n        prepend={<DismissableBanner id='explore/statuses'><FormattedMessage id='dismissable_banner.explore_statuses' defaultMessage='These are posts from across the social web that are gaining traction today. Newer posts with more boosts and favorites are ranked higher.' /></DismissableBanner>}\n        alwaysPrepend\n        timelineId='explore'\n        statusIds={statusIds}\n        scrollKey='explore-statuses'\n        hasMore={hasMore}\n        isLoading={isLoading}\n        onLoadMore={this.handleLoadMore}\n        emptyMessage={emptyMessage}\n        bindToDocument={!multiColumn}\n        withCounters\n      />\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(withRouter(Statuses));\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { withRouter } from 'react-router-dom';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport { fetchSuggestions } from 'mastodon/actions/suggestions';\nimport { LoadingIndicator } from 'mastodon/components/loading_indicator';\nimport AccountCard from 'mastodon/features/directory/components/account_card';\nimport { WithRouterPropTypes } from 'mastodon/utils/react_router';\n\nconst mapStateToProps = state => ({\n  suggestions: state.getIn(['suggestions', 'items']),\n  isLoading: state.getIn(['suggestions', 'isLoading']),\n});\n\nclass Suggestions extends PureComponent {\n\n  static propTypes = {\n    isLoading: PropTypes.bool,\n    suggestions: ImmutablePropTypes.list,\n    dispatch: PropTypes.func.isRequired,\n    ...WithRouterPropTypes,\n  };\n\n  componentDidMount () {\n    const { dispatch, suggestions, history } = this.props;\n\n    // If we're navigating back to the screen, do not trigger a reload\n    if (history.action === 'POP' && suggestions.size > 0) {\n      return;\n    }\n\n    dispatch(fetchSuggestions(true));\n  }\n\n  render () {\n    const { isLoading, suggestions } = this.props;\n\n    if (!isLoading && suggestions.isEmpty()) {\n      return (\n        <div className='explore__suggestions scrollable scrollable--flex'>\n          <div className='empty-column-indicator'>\n            <FormattedMessage id='empty_column.explore_statuses' defaultMessage='Nothing is trending right now. Check back later!' />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className='explore__suggestions scrollable' data-nosnippet>\n        {isLoading ? <LoadingIndicator /> : suggestions.map(suggestion => (\n          <AccountCard key={suggestion.get('account')} id={suggestion.get('account')} />\n        ))}\n      </div>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(withRouter(Suggestions));\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { withRouter } from 'react-router-dom';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport { fetchTrendingHashtags } from 'mastodon/actions/trends';\nimport { DismissableBanner } from 'mastodon/components/dismissable_banner';\nimport { ImmutableHashtag as Hashtag } from 'mastodon/components/hashtag';\nimport { LoadingIndicator } from 'mastodon/components/loading_indicator';\nimport { WithRouterPropTypes } from 'mastodon/utils/react_router';\n\nconst mapStateToProps = state => ({\n  hashtags: state.getIn(['trends', 'tags', 'items']),\n  isLoadingHashtags: state.getIn(['trends', 'tags', 'isLoading']),\n});\n\nclass Tags extends PureComponent {\n\n  static propTypes = {\n    hashtags: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    dispatch: PropTypes.func.isRequired,\n    ...WithRouterPropTypes,\n  };\n\n  componentDidMount () {\n    const { dispatch, history, hashtags } = this.props;\n\n    // If we're navigating back to the screen, do not trigger a reload\n    if (history.action === 'POP' && hashtags.size > 0) {\n      return;\n    }\n\n    dispatch(fetchTrendingHashtags());\n  }\n\n  render () {\n    const { isLoading, hashtags } = this.props;\n\n    const banner = (\n      <DismissableBanner id='explore/tags'>\n        <FormattedMessage id='dismissable_banner.explore_tags' defaultMessage='These are hashtags that are gaining traction on the social web today. Hashtags that are used by more different people are ranked higher.' />\n      </DismissableBanner>\n    );\n\n    if (!isLoading && hashtags.isEmpty()) {\n      return (\n        <div className='explore__links scrollable scrollable--flex'>\n          {banner}\n\n          <div className='empty-column-indicator'>\n            <FormattedMessage id='empty_column.explore_statuses' defaultMessage='Nothing is trending right now. Check back later!' />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className='scrollable explore__links' data-nosnippet>\n        {banner}\n\n        {isLoading ? (<LoadingIndicator />) : hashtags.map(hashtag => (\n          <Hashtag key={hashtag.get('name')} hashtag={hashtag} />\n        ))}\n      </div>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(withRouter(Tags));\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\nimport { NavLink, Switch, Route } from 'react-router-dom';\n\nimport { connect } from 'react-redux';\n\nimport { ReactComponent as SearchIcon } from '@material-symbols/svg-600/outlined/search.svg';\nimport { ReactComponent as TagIcon } from '@material-symbols/svg-600/outlined/tag.svg';\n\nimport Column from 'mastodon/components/column';\nimport ColumnHeader from 'mastodon/components/column_header';\nimport Search from 'mastodon/features/compose/containers/search_container';\nimport { trendsEnabled } from 'mastodon/initial_state';\n\nimport Links from './links';\nimport SearchResults from './results';\nimport Statuses from './statuses';\nimport Suggestions from './suggestions';\nimport Tags from './tags';\n\nconst messages = defineMessages({\n  title: { id: 'explore.title', defaultMessage: 'Explore' },\n  searchResults: { id: 'explore.search_results', defaultMessage: 'Search results' },\n});\n\nconst mapStateToProps = state => ({\n  layout: state.getIn(['meta', 'layout']),\n  isSearching: state.getIn(['search', 'submitted']) || !trendsEnabled,\n});\n\nclass Explore extends PureComponent {\n\n  static contextTypes = {\n    identity: PropTypes.object,\n  };\n\n  static propTypes = {\n    intl: PropTypes.object.isRequired,\n    multiColumn: PropTypes.bool,\n    isSearching: PropTypes.bool,\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  render() {\n    const { intl, multiColumn, isSearching } = this.props;\n    const { signedIn } = this.context.identity;\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon={isSearching ? 'search' : 'hashtag'}\n          iconComponent={isSearching ? SearchIcon : TagIcon}\n          title={intl.formatMessage(isSearching ? messages.searchResults : messages.title)}\n          onClick={this.handleHeaderClick}\n          multiColumn={multiColumn}\n        />\n\n        <div className='explore__search-header'>\n          <Search />\n        </div>\n\n        {isSearching ? (\n          <SearchResults />\n        ) : (\n          <>\n            <div className='account__section-headline'>\n              <NavLink exact to='/explore'>\n                <FormattedMessage tagName='div' id='explore.trending_statuses' defaultMessage='Posts' />\n              </NavLink>\n\n              <NavLink exact to='/explore/tags'>\n                <FormattedMessage tagName='div' id='explore.trending_tags' defaultMessage='Hashtags' />\n              </NavLink>\n\n              {signedIn && (\n                <NavLink exact to='/explore/suggestions'>\n                  <FormattedMessage tagName='div' id='explore.suggested_follows' defaultMessage='People' />\n                </NavLink>\n              )}\n\n              <NavLink exact to='/explore/links'>\n                <FormattedMessage tagName='div' id='explore.trending_links' defaultMessage='News' />\n              </NavLink>\n            </div>\n\n            <Switch>\n              <Route path='/explore/tags' component={Tags} />\n              <Route path='/explore/links' component={Links} />\n              <Route path='/explore/suggestions' component={Suggestions} />\n              <Route exact path={['/explore', '/explore/posts', '/search']}>\n                <Statuses multiColumn={multiColumn} />\n              </Route>\n            </Switch>\n\n            <Helmet>\n              <title>{intl.formatMessage(messages.title)}</title>\n              <meta name='robots' content={isSearching ? 'noindex' : 'all'} />\n            </Helmet>\n          </>\n        )}\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(injectIntl(Explore));\n"],"sourceRoot":""}