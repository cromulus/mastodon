{"version":3,"sources":["webpack:///./app/javascript/mastodon/components/avatar_composite.jsx","webpack:///./app/javascript/mastodon/features/direct_timeline/components/conversation.jsx","webpack:///./app/javascript/mastodon/features/direct_timeline/containers/conversation_container.js","webpack:///./app/javascript/mastodon/features/direct_timeline/components/conversations_list.jsx","webpack:///./app/javascript/mastodon/features/direct_timeline/containers/conversations_list_container.js","webpack:///./app/javascript/mastodon/features/direct_timeline/index.jsx"],"names":["AvatarComposite","PureComponent","renderItem","account","size","index","animate","this","props","width","height","top","left","bottom","right","style","_jsx","get","Avatar","render","accounts","className","take","map","i","Math","min","defaultProps","autoPlayGif","messages","defineMessages","more","id","defaultMessage","open","reply","markAsRead","delete","muteConversation","unmuteConversation","Conversation","ImmutablePureComponent","constructor","arguments","handleMouseEnter","_ref","currentTarget","emojis","querySelectorAll","length","emoji","src","getAttribute","handleMouseLeave","_ref2","handleClick","history","lastStatus","unread","markRead","push","getIn","handleMarkAsRead","handleReply","handleDelete","handleHotkeyMoveUp","onMoveUp","conversationId","handleHotkeyMoveDown","onMoveDown","handleConversationMute","onMute","handleShowMore","onToggleHidden","scrollKey","intl","menu","text","formatMessage","action","names","a","Link","to","title","dangerouslySetInnerHTML","__html","reduce","prev","cur","handlers","moveUp","moveDown","toggleHidden","HotKeys","classNames","tabIndex","onClick","role","RelativeTimestamp","timestamp","onMouseEnter","onMouseLeave","FormattedMessage","values","StatusContent","status","expanded","onExpandedToggle","collapsible","AttachmentList","compact","media","IconButton","icon","iconComponent","ReplyIcon","DropdownMenuContainer","items","MoreHorizIcon","direction","propTypes","PropTypes","string","isRequired","ImmutablePropTypes","list","bool","func","object","WithRouterPropTypes","withRouter","injectIntl","replyConfirm","replyMessage","connect","mapStateToProps","getStatus","makeGetStatus","state","conversation","find","x","lastStatusId","accountId","mapDispatchToProps","dispatch","markConversationRead","router","_","getState","trim","openModal","modalType","modalProps","message","confirm","onConfirm","replyCompose","deleteConversation","unmuteStatus","muteStatus","revealStatus","hideStatus","ConversationsList","getCurrentIndex","conversations","findIndex","handleMoveUp","elementIndex","_selectChild","handleMoveDown","setRef","c","node","handleLoadOlder","_debounce","last","onLoadMore","leading","align_top","container","element","querySelector","scrollTop","offsetTop","scrollIntoView","clientHeight","offsetHeight","focus","isLoading","other","_jsx2","ScrollableList","showLoading","isEmpty","ref","children","item","ConversationContainer","hasMore","maxId","expandConversations","DirectTimeline","handlePin","columnId","removeColumn","addColumn","handleMove","dir","moveColumn","handleHeaderClick","column","handleLoadMore","componentDidMount","mountConversations","disconnect","connectDirectStream","componentWillUnmount","unmountConversations","hasUnread","multiColumn","pinned","_jsxs","Column","bindToDocument","label","ColumnHeader","AlternateEmailIcon","active","onPin","onMove","ConversationsListContainer","trackScroll","timelineId","prepend","href","target","alwaysPrepend","emptyMessage","Helmet","name","content"],"mappings":"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","file":"js/features/direct_timeline-a9a9e89bbc17d8a58d34.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\nimport { autoPlayGif } from '../initial_state';\n\nimport { Avatar } from './avatar';\n\nexport default class AvatarComposite extends PureComponent {\n\n  static propTypes = {\n    accounts: ImmutablePropTypes.list.isRequired,\n    animate: PropTypes.bool,\n    size: PropTypes.number.isRequired,\n  };\n\n  static defaultProps = {\n    animate: autoPlayGif,\n  };\n\n  renderItem (account, size, index) {\n    const { animate } = this.props;\n\n    let width  = 50;\n    let height = 100;\n    let top    = 'auto';\n    let left   = 'auto';\n    let bottom = 'auto';\n    let right  = 'auto';\n\n    if (size === 1) {\n      width = 100;\n    }\n\n    if (size === 4 || (size === 3 && index > 0)) {\n      height = 50;\n    }\n\n    if (size === 2) {\n      if (index === 0) {\n        right = '1px';\n      } else {\n        left = '1px';\n      }\n    } else if (size === 3) {\n      if (index === 0) {\n        right = '1px';\n      } else if (index > 0) {\n        left = '1px';\n      }\n\n      if (index === 1) {\n        bottom = '1px';\n      } else if (index > 1) {\n        top = '1px';\n      }\n    } else if (size === 4) {\n      if (index === 0 || index === 2) {\n        right = '1px';\n      }\n\n      if (index === 1 || index === 3) {\n        left = '1px';\n      }\n\n      if (index < 2) {\n        bottom = '1px';\n      } else {\n        top = '1px';\n      }\n    }\n\n    const style = {\n      left: left,\n      top: top,\n      right: right,\n      bottom: bottom,\n      width: `${width}%`,\n      height: `${height}%`,\n    };\n\n    return (\n      <div key={account.get('id')} style={style}>\n        <Avatar account={account} animate={animate} />\n      </div>\n    );\n  }\n\n  render() {\n    const { accounts, size } = this.props;\n\n    return (\n      <div className='account__avatar-composite' style={{ width: `${size}px`, height: `${size}px` }}>\n        {accounts.take(4).map((account, i) => this.renderItem(account, Math.min(accounts.size, 4), i))}\n\n        {accounts.size > 4 && (\n          <span className='account__avatar-composite__label'>\n            +{accounts.size - 4}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n}\n","import PropTypes from 'prop-types';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport classNames from 'classnames';\nimport { Link, withRouter } from 'react-router-dom';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nimport { ReactComponent as MoreHorizIcon } from '@material-symbols/svg-600/outlined/more_horiz.svg';\nimport { ReactComponent as ReplyIcon } from '@material-symbols/svg-600/outlined/reply.svg';\nimport { HotKeys } from 'react-hotkeys';\n\nimport AttachmentList from 'mastodon/components/attachment_list';\nimport AvatarComposite from 'mastodon/components/avatar_composite';\nimport { IconButton } from 'mastodon/components/icon_button';\nimport { RelativeTimestamp } from 'mastodon/components/relative_timestamp';\nimport StatusContent from 'mastodon/components/status_content';\nimport DropdownMenuContainer from 'mastodon/containers/dropdown_menu_container';\nimport { autoPlayGif } from 'mastodon/initial_state';\nimport { WithRouterPropTypes } from 'mastodon/utils/react_router';\n\nconst messages = defineMessages({\n  more: { id: 'status.more', defaultMessage: 'More' },\n  open: { id: 'conversation.open', defaultMessage: 'View conversation' },\n  reply: { id: 'status.reply', defaultMessage: 'Reply' },\n  markAsRead: { id: 'conversation.mark_as_read', defaultMessage: 'Mark as read' },\n  delete: { id: 'conversation.delete', defaultMessage: 'Delete conversation' },\n  muteConversation: { id: 'status.mute_conversation', defaultMessage: 'Mute conversation' },\n  unmuteConversation: { id: 'status.unmute_conversation', defaultMessage: 'Unmute conversation' },\n});\n\nclass Conversation extends ImmutablePureComponent {\n\n  static propTypes = {\n    conversationId: PropTypes.string.isRequired,\n    accounts: ImmutablePropTypes.list.isRequired,\n    lastStatus: ImmutablePropTypes.map,\n    unread:PropTypes.bool.isRequired,\n    scrollKey: PropTypes.string,\n    onMoveUp: PropTypes.func,\n    onMoveDown: PropTypes.func,\n    markRead: PropTypes.func.isRequired,\n    delete: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    ...WithRouterPropTypes,\n  };\n\n  handleMouseEnter = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-original');\n    }\n  };\n\n  handleMouseLeave = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-static');\n    }\n  };\n\n  handleClick = () => {\n    if (!this.props.history) {\n      return;\n    }\n\n    const { lastStatus, unread, markRead } = this.props;\n\n    if (unread) {\n      markRead();\n    }\n\n    this.props.history.push(`/@${lastStatus.getIn(['account', 'acct'])}/${lastStatus.get('id')}`);\n  };\n\n  handleMarkAsRead = () => {\n    this.props.markRead();\n  };\n\n  handleReply = () => {\n    this.props.reply(this.props.lastStatus, this.props.history);\n  };\n\n  handleDelete = () => {\n    this.props.delete();\n  };\n\n  handleHotkeyMoveUp = () => {\n    this.props.onMoveUp(this.props.conversationId);\n  };\n\n  handleHotkeyMoveDown = () => {\n    this.props.onMoveDown(this.props.conversationId);\n  };\n\n  handleConversationMute = () => {\n    this.props.onMute(this.props.lastStatus);\n  };\n\n  handleShowMore = () => {\n    this.props.onToggleHidden(this.props.lastStatus);\n  };\n\n  render () {\n    const { accounts, lastStatus, unread, scrollKey, intl } = this.props;\n\n    if (lastStatus === null) {\n      return null;\n    }\n\n    const menu = [\n      { text: intl.formatMessage(messages.open), action: this.handleClick },\n      null,\n    ];\n\n    menu.push({ text: intl.formatMessage(lastStatus.get('muted') ? messages.unmuteConversation : messages.muteConversation), action: this.handleConversationMute });\n\n    if (unread) {\n      menu.push({ text: intl.formatMessage(messages.markAsRead), action: this.handleMarkAsRead });\n      menu.push(null);\n    }\n\n    menu.push({ text: intl.formatMessage(messages.delete), action: this.handleDelete });\n\n    const names = accounts.map(a => <Link to={`/@${a.get('acct')}`} key={a.get('id')} title={a.get('acct')}><bdi><strong className='display-name__html' dangerouslySetInnerHTML={{ __html: a.get('display_name_html') }} /></bdi></Link>).reduce((prev, cur) => [prev, ', ', cur]);\n\n    const handlers = {\n      reply: this.handleReply,\n      open: this.handleClick,\n      moveUp: this.handleHotkeyMoveUp,\n      moveDown: this.handleHotkeyMoveDown,\n      toggleHidden: this.handleShowMore,\n    };\n\n    return (\n      <HotKeys handlers={handlers}>\n        <div className={classNames('conversation focusable muted', { 'conversation--unread': unread })} tabIndex={0}>\n          <div className='conversation__avatar' onClick={this.handleClick} role='presentation'>\n            <AvatarComposite accounts={accounts} size={48} />\n          </div>\n\n          <div className='conversation__content'>\n            <div className='conversation__content__info'>\n              <div className='conversation__content__relative-time'>\n                {unread && <span className='conversation__unread' />} <RelativeTimestamp timestamp={lastStatus.get('created_at')} />\n              </div>\n\n              <div className='conversation__content__names' onMouseEnter={this.handleMouseEnter} onMouseLeave={this.handleMouseLeave}>\n                <FormattedMessage id='conversation.with' defaultMessage='With {names}' values={{ names: <span>{names}</span> }} />\n              </div>\n            </div>\n\n            <StatusContent\n              status={lastStatus}\n              onClick={this.handleClick}\n              expanded={!lastStatus.get('hidden')}\n              onExpandedToggle={this.handleShowMore}\n              collapsible\n            />\n\n            {lastStatus.get('media_attachments').size > 0 && (\n              <AttachmentList\n                compact\n                media={lastStatus.get('media_attachments')}\n              />\n            )}\n\n            <div className='status__action-bar'>\n              <IconButton className='status__action-bar-button' title={intl.formatMessage(messages.reply)} icon='reply' iconComponent={ReplyIcon} onClick={this.handleReply} />\n\n              <div className='status__action-bar-dropdown'>\n                <DropdownMenuContainer\n                  scrollKey={scrollKey}\n                  status={lastStatus}\n                  items={menu}\n                  icon='ellipsis-h'\n                  iconComponent={MoreHorizIcon}\n                  size={18}\n                  direction='right'\n                  title={intl.formatMessage(messages.more)}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </HotKeys>\n    );\n  }\n\n}\n\nexport default withRouter(injectIntl(Conversation));\n","import { defineMessages, injectIntl } from 'react-intl';\n\nimport { connect } from 'react-redux';\n\nimport { replyCompose } from 'mastodon/actions/compose';\nimport { markConversationRead, deleteConversation } from 'mastodon/actions/conversations';\nimport { openModal } from 'mastodon/actions/modal';\nimport { muteStatus, unmuteStatus, hideStatus, revealStatus } from 'mastodon/actions/statuses';\nimport { makeGetStatus } from 'mastodon/selectors';\n\nimport Conversation from '../components/conversation';\n\nconst messages = defineMessages({\n  replyConfirm: { id: 'confirmations.reply.confirm', defaultMessage: 'Reply' },\n  replyMessage: { id: 'confirmations.reply.message', defaultMessage: 'Replying now will overwrite the message you are currently composing. Are you sure you want to proceed?' },\n});\n\nconst mapStateToProps = () => {\n  const getStatus = makeGetStatus();\n\n  return (state, { conversationId }) => {\n    const conversation = state.getIn(['conversations', 'items']).find(x => x.get('id') === conversationId);\n    const lastStatusId = conversation.get('last_status', null);\n\n    return {\n      accounts: conversation.get('accounts').map(accountId => state.getIn(['accounts', accountId], null)),\n      unread: conversation.get('unread'),\n      lastStatus: lastStatusId && getStatus(state, { id: lastStatusId }),\n    };\n  };\n};\n\nconst mapDispatchToProps = (dispatch, { intl, conversationId }) => ({\n\n  markRead () {\n    dispatch(markConversationRead(conversationId));\n  },\n\n  reply (status, router) {\n    dispatch((_, getState) => {\n      let state = getState();\n\n      if (state.getIn(['compose', 'text']).trim().length !== 0) {\n        dispatch(openModal({\n          modalType: 'CONFIRM',\n          modalProps: {\n            message: intl.formatMessage(messages.replyMessage),\n            confirm: intl.formatMessage(messages.replyConfirm),\n            onConfirm: () => dispatch(replyCompose(status, router)),\n          },\n        }));\n      } else {\n        dispatch(replyCompose(status, router));\n      }\n    });\n  },\n\n  delete () {\n    dispatch(deleteConversation(conversationId));\n  },\n\n  onMute (status) {\n    if (status.get('muted')) {\n      dispatch(unmuteStatus(status.get('id')));\n    } else {\n      dispatch(muteStatus(status.get('id')));\n    }\n  },\n\n  onToggleHidden (status) {\n    if (status.get('hidden')) {\n      dispatch(revealStatus(status.get('id')));\n    } else {\n      dispatch(hideStatus(status.get('id')));\n    }\n  },\n\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(Conversation));\n","import PropTypes from 'prop-types';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nimport { debounce } from 'lodash';\n\nimport ScrollableList from '../../../components/scrollable_list';\nimport ConversationContainer from '../containers/conversation_container';\n\nexport default class ConversationsList extends ImmutablePureComponent {\n\n  static propTypes = {\n    conversations: ImmutablePropTypes.list.isRequired,\n    scrollKey: PropTypes.string.isRequired,\n    hasMore: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    onLoadMore: PropTypes.func,\n  };\n\n  getCurrentIndex = id => this.props.conversations.findIndex(x => x.get('id') === id);\n\n  handleMoveUp = id => {\n    const elementIndex = this.getCurrentIndex(id) - 1;\n    this._selectChild(elementIndex, true);\n  };\n\n  handleMoveDown = id => {\n    const elementIndex = this.getCurrentIndex(id) + 1;\n    this._selectChild(elementIndex, false);\n  };\n\n  _selectChild (index, align_top) {\n    const container = this.node.node;\n    const element = container.querySelector(`article:nth-of-type(${index + 1}) .focusable`);\n\n    if (element) {\n      if (align_top && container.scrollTop > element.offsetTop) {\n        element.scrollIntoView(true);\n      } else if (!align_top && container.scrollTop + container.clientHeight < element.offsetTop + element.offsetHeight) {\n        element.scrollIntoView(false);\n      }\n      element.focus();\n    }\n  }\n\n  setRef = c => {\n    this.node = c;\n  };\n\n  handleLoadOlder = debounce(() => {\n    const last = this.props.conversations.last();\n\n    if (last && last.get('last_status')) {\n      this.props.onLoadMore(last.get('last_status'));\n    }\n  }, 300, { leading: true });\n\n  render () {\n    const { conversations, isLoading, onLoadMore, ...other } = this.props;\n\n    return (\n      <ScrollableList {...other} isLoading={isLoading} showLoading={isLoading && conversations.isEmpty()} onLoadMore={onLoadMore && this.handleLoadOlder} ref={this.setRef}>\n        {conversations.map(item => (\n          <ConversationContainer\n            key={item.get('id')}\n            conversationId={item.get('id')}\n            onMoveUp={this.handleMoveUp}\n            onMoveDown={this.handleMoveDown}\n            scrollKey={this.props.scrollKey}\n          />\n        ))}\n      </ScrollableList>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\n\nimport { expandConversations } from '../../../actions/conversations';\nimport ConversationsList from '../components/conversations_list';\n\nconst mapStateToProps = state => ({\n  conversations: state.getIn(['conversations', 'items']),\n  isLoading: state.getIn(['conversations', 'isLoading'], true),\n  hasMore: state.getIn(['conversations', 'hasMore'], false),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onLoadMore: maxId => dispatch(expandConversations({ maxId })),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConversationsList);\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport { connect } from 'react-redux';\n\nimport { ReactComponent as AlternateEmailIcon } from '@material-symbols/svg-600/outlined/alternate_email.svg';\n\nimport { addColumn, removeColumn, moveColumn } from 'mastodon/actions/columns';\nimport { mountConversations, unmountConversations, expandConversations } from 'mastodon/actions/conversations';\nimport { connectDirectStream } from 'mastodon/actions/streaming';\nimport Column from 'mastodon/components/column';\nimport ColumnHeader from 'mastodon/components/column_header';\n\nimport ConversationsListContainer from './containers/conversations_list_container';\n\nconst messages = defineMessages({\n  title: { id: 'column.direct', defaultMessage: 'Private mentions' },\n});\n\nclass DirectTimeline extends PureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    columnId: PropTypes.string,\n    intl: PropTypes.object.isRequired,\n    hasUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('DIRECT', {}));\n    }\n  };\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n\n    dispatch(mountConversations());\n    dispatch(expandConversations());\n    this.disconnect = dispatch(connectDirectStream());\n  }\n\n  componentWillUnmount () {\n    this.props.dispatch(unmountConversations());\n\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandConversations({ maxId }));\n  };\n\n  render () {\n    const { intl, hasUnread, columnId, multiColumn } = this.props;\n    const pinned = !!columnId;\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='at'\n          iconComponent={AlternateEmailIcon}\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        />\n\n        <ConversationsListContainer\n          trackScroll={!pinned}\n          scrollKey={`direct_timeline-${columnId}`}\n          timelineId='direct'\n          bindToDocument={!multiColumn}\n          onLoadMore={this.handleLoadMore}\n          prepend={<div className='follow_requests-unlocked_explanation'><span><FormattedMessage id='compose_form.encryption_warning' defaultMessage='Posts on Mastodon are not end-to-end encrypted. Do not share any dangerous information over Mastodon.' /> <a href='/terms' target='_blank'><FormattedMessage id='compose_form.direct_message_warning_learn_more' defaultMessage='Learn more' /></a></span></div>}\n          alwaysPrepend\n          emptyMessage={<FormattedMessage id='empty_column.direct' defaultMessage=\"You don't have any private mentions yet. When you send or receive one, it will show up here.\" />}\n        />\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect()(injectIntl(DirectTimeline));\n"],"sourceRoot":""}